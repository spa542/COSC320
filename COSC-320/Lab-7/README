Ryan Rosiak
COSC 320-002
Lab-7 README File
3/14/20

Lab Description:
This lab demonstrates basic functionality of hashing. Specifically, the hashing of
integers and various strings. The hashing for integers is based on the 
multiplication algorithm for hashing and the two string hash functions that are
shown are ones that are created uniquely following a similar premise. These
functions show clearly that hashing is an important concept that needs to be
learned.

Files to pay attention to:

main.o - This is the compilation linker file

main - Output file that is run when the program is executed by the user

Makefile - File that allows the user to compile without having to input specific
commands

Makefile Instructions:
Type "make" without the quotes and the program will compile everything for you.
Then proceed with using ./main in order to run the program.

Instructions for Program:

Follow the Makefile instructions above to run the program without any manual work.
If not using Makefile, then you must compile the .cpp files into .o files.
(g++ -c main.cpp) Then you must link those with a final compilation all while 
labeling the output file as main.
**You must use -std=c++11 within your compilation steps

Questions:

2.b. This hash function makes sense because it follows the basic premise of 
what a hash function is meant to do. You take a large pool which is your 2 ^ W,
and then you want your values to be in a sub-pool of that pool which is your 
value that is input. The hope is that the function will be hased out and mapped
to something that is outside the sub-pool and in the overall general pool. That is
why the function is multiplied out and then modulo by the 2 ^ whole pool - 
2 ^ smaller pool. This is what gives you your final hash.

a. My approach to the problem was to focus on what the premise of hashing actually
is and then come up with some basic hashes that use odd numbers and modulo in order
to get a unique but unfamiliar hash that solves the problem given. Overall, the
point was to understand the concept of hashing and then apply it with minimal
tweaks in order to get different outputs as a result.

b. For my string functions, I used one function that hashed out each character by
adding it to an odd number and summing up all of those additions and then modulo by
the large pool. The other function I used was something that would take a sum and 
multiply it to an odd number size and then add the int representation of each 
character in the string into each addition. These are both just little tweaks to 
get different hashes as a result.

c. I know this code could be improved by a lot. There are a lot of unique hashing
functions. These I do not know. But there has to be a better way to create a 
seemingly random hash output but keep the results uniform in a better way. This 
meaning that there is definitely a better way to make values that are close to each
other look much different in the hash. This would prevent people from figuring out
the algorithm. But these ways are for further research and learning.
